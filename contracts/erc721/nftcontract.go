// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc721

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// NftcontractMetaData contains all meta data concerning the Nftcontract contract.
var NftcontractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenURIPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURIPrefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162005a1338038062005a13833981810160405281019062000037919062000718565b8282620000596200004d6200017060201b60201c565b6200017860201b60201c565b816003908051906020019062000071929190620004cb565b5080600490805190602001906200008a929190620004cb565b5050506000600e60006101000a81548160ff02191690831515021790555080600f9080519060200190620000c0929190620004cb565b50620000e56000801b620000d96200017060201b60201c565b6200023c60201b60201c565b620001267f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66200011a6200017060201b60201c565b6200023c60201b60201c565b620001677f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6200015b6200017060201b60201c565b6200023c60201b60201c565b50505062000836565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200024e82826200025260201b60201c565b5050565b6200026982826200029a60201b620013d31760201c565b6200029581600260008581526020019081526020016000206200038b60201b620014b31790919060201c565b505050565b620002ac8282620003c360201b60201c565b6200038757600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200032c6200017060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620003bb836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200042e60201b60201c565b905092915050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000620004428383620004a860201b60201c565b6200049d578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620004a2565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b828054620004d99062000800565b90600052602060002090601f016020900481019282620004fd576000855562000549565b82601f106200051857805160ff191683800117855562000549565b8280016001018555821562000549579182015b82811115620005485782518255916020019190600101906200052b565b5b5090506200055891906200055c565b5090565b5b80821115620005775760008160009055506001016200055d565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620005e48262000599565b810181811067ffffffffffffffff82111715620006065762000605620005aa565b5b80604052505050565b60006200061b6200057b565b9050620006298282620005d9565b919050565b600067ffffffffffffffff8211156200064c576200064b620005aa565b5b620006578262000599565b9050602081019050919050565b60005b838110156200068457808201518184015260208101905062000667565b8381111562000694576000848401525b50505050565b6000620006b1620006ab846200062e565b6200060f565b905082815260208101848484011115620006d057620006cf62000594565b5b620006dd84828562000664565b509392505050565b600082601f830112620006fd57620006fc6200058f565b5b81516200070f8482602086016200069a565b91505092915050565b60008060006060848603121562000734576200073362000585565b5b600084015167ffffffffffffffff8111156200075557620007546200058a565b5b6200076386828701620006e5565b935050602084015167ffffffffffffffff8111156200078757620007866200058a565b5b6200079586828701620006e5565b925050604084015167ffffffffffffffff811115620007b957620007b86200058a565b5b620007c786828701620006e5565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200081957607f821691505b6020821081141562000830576200082f620007d1565b5b50919050565b6151cd80620008466000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c8063715018a611610130578063a22cb465116100b8578063d547741f1161007c578063d547741f14610660578063e63ab1e91461067c578063e985e9c51461069a578063f2fde38b146106ca578063f7b20a7d146106e657610227565b8063a22cb465146105aa578063b88d4fde146105c6578063c87b56dd146105e2578063ca15c87314610612578063d53913931461064257610227565b80639010d07c116100ff5780639010d07c146104f257806391d148541461052257806395d89b411461055257806399e0dd7c14610570578063a217fddf1461058c57610227565b8063715018a6146104a457806377097fc8146104ae5780638456cb59146104ca5780638da5cb5b146104d457610227565b80632f745c59116101b357806342966c681161018257806342966c68146103da5780634f6ccce7146103f65780635c975abb146104265780636352211e1461044457806370a082311461047457610227565b80632f745c591461036857806336568abe146103985780633f4ba83a146103b457806342842e0e146103be57610227565b8063162094c4116101fa578063162094c4146102c657806318160ddd146102e257806323b872dd14610300578063248a9ca31461031c5780632f2ff15d1461034c57610227565b806301ffc9a71461022c57806306fdde031461025c578063081812fc1461027a578063095ea7b3146102aa575b600080fd5b61024660048036038101906102419190613582565b610704565b60405161025391906135ca565b60405180910390f35b610264610716565b604051610271919061367e565b60405180910390f35b610294600480360381019061028f91906136d6565b6107a8565b6040516102a19190613744565b60405180910390f35b6102c460048036038101906102bf919061378b565b61082d565b005b6102e060048036038101906102db9190613900565b610945565b005b6102ea610953565b6040516102f7919061396b565b60405180910390f35b61031a60048036038101906103159190613986565b610960565b005b61033660048036038101906103319190613a0f565b6109c0565b6040516103439190613a4b565b60405180910390f35b61036660048036038101906103619190613a66565b6109e0565b005b610382600480360381019061037d919061378b565b610a09565b60405161038f919061396b565b60405180910390f35b6103b260048036038101906103ad9190613a66565b610aae565b005b6103bc610b31565b005b6103d860048036038101906103d39190613986565b610bab565b005b6103f460048036038101906103ef91906136d6565b610bcb565b005b610410600480360381019061040b91906136d6565b610c27565b60405161041d919061396b565b60405180910390f35b61042e610c98565b60405161043b91906135ca565b60405180910390f35b61045e600480360381019061045991906136d6565b610caf565b60405161046b9190613744565b60405180910390f35b61048e60048036038101906104899190613aa6565b610d61565b60405161049b919061396b565b60405180910390f35b6104ac610e19565b005b6104c860048036038101906104c39190613900565b610ea1565b005b6104d2610f29565b005b6104dc610fa3565b6040516104e99190613744565b60405180910390f35b61050c60048036038101906105079190613ad3565b610fcc565b6040516105199190613744565b60405180910390f35b61053c60048036038101906105379190613a66565b610ffb565b60405161054991906135ca565b60405180910390f35b61055a611066565b604051610567919061367e565b60405180910390f35b61058a60048036038101906105859190613b13565b6110f8565b005b610594611112565b6040516105a19190613a4b565b60405180910390f35b6105c460048036038101906105bf9190613b88565b611119565b005b6105e060048036038101906105db9190613c69565b61112f565b005b6105fc60048036038101906105f791906136d6565b611191565b604051610609919061367e565b60405180910390f35b61062c60048036038101906106279190613a0f565b6111a3565b604051610639919061396b565b60405180910390f35b61064a6111c7565b6040516106579190613a4b565b60405180910390f35b61067a60048036038101906106759190613a66565b6111eb565b005b610684611214565b6040516106919190613a4b565b60405180910390f35b6106b460048036038101906106af9190613cec565b611238565b6040516106c191906135ca565b60405180910390f35b6106e460048036038101906106df9190613aa6565b6112cc565b005b6106ee6113c4565b6040516106fb919061367e565b60405180910390f35b600061070f826114e3565b9050919050565b60606003805461072590613d5b565b80601f016020809104026020016040519081016040528092919081815260200182805461075190613d5b565b801561079e5780601f106107735761010080835404028352916020019161079e565b820191906000526020600020905b81548152906001019060200180831161078157829003601f168201915b5050505050905090565b60006107b38261155d565b6107f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e990613dff565b60405180910390fd5b6007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061083882610caf565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090613e91565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108c86115c9565b73ffffffffffffffffffffffffffffffffffffffff1614806108f757506108f6816108f16115c9565b611238565b5b610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092d90613f23565b60405180910390fd5b61094083836115d1565b505050565b61094f828261168a565b5050565b6000600c80549050905090565b61097161096b6115c9565b826116fe565b6109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a790613fb5565b60405180910390fd5b6109bb8383836117dc565b505050565b600060016000838152602001908152602001600020600101549050919050565b6109e9826109c0565b6109fa816109f56115c9565b611a43565b610a048383611ae0565b505050565b6000610a1483610d61565b8210610a55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4c90614047565b60405180910390fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610ab66115c9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1a906140d9565b60405180910390fd5b610b2d8282611b14565b5050565b610b627f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610b5d6115c9565b610ffb565b610ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b989061416b565b60405180910390fd5b610ba9611b48565b565b610bc68383836040518060200160405280600081525061112f565b505050565b610bdc610bd66115c9565b826116fe565b610c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c12906141fd565b60405180910390fd5b610c2481611bea565b50565b6000610c31610953565b8210610c72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c699061428f565b60405180910390fd5b600c8281548110610c8657610c856142af565b5b90600052602060002001549050919050565b6000600e60009054906101000a900460ff16905090565b6000806005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4f90614350565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc9906143e2565b60405180910390fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e216115c9565b73ffffffffffffffffffffffffffffffffffffffff16610e3f610fa3565b73ffffffffffffffffffffffffffffffffffffffff1614610e95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8c9061444e565b60405180910390fd5b610e9f6000611bf6565b565b610ed27f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610ecd6115c9565b610ffb565b610f11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f08906144e0565b60405180910390fd5b610f1b3383611cba565b610f258282610945565b5050565b610f5a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610f556115c9565b610ffb565b610f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9090614572565b60405180910390fd5b610fa1611e94565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610ff38260026000868152602001908152602001600020611f3790919063ffffffff16565b905092915050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606004805461107590613d5b565b80601f01602080910402602001604051908101604052809291908181526020018280546110a190613d5b565b80156110ee5780601f106110c3576101008083540402835291602001916110ee565b820191906000526020600020905b8154815290600101906020018083116110d157829003601f168201915b5050505050905090565b80600f908051906020019061110e929190613433565b5050565b6000801b81565b61112b6111246115c9565b8383611f51565b5050565b61114061113a6115c9565b836116fe565b61117f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117690613fb5565b60405180910390fd5b61118b848484846120be565b50505050565b606061119c8261211a565b9050919050565b60006111c06002600084815260200190815260200160002061226c565b9050919050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6111f4826109c0565b611205816112006115c9565b611a43565b61120f8383611b14565b505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6112d46115c9565b73ffffffffffffffffffffffffffffffffffffffff166112f2610fa3565b73ffffffffffffffffffffffffffffffffffffffff1614611348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133f9061444e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113af90614604565b60405180910390fd5b6113c181611bf6565b50565b60606113ce612281565b905090565b6113dd8282610ffb565b6114af57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506114546115c9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006114db836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612313565b905092915050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611556575061155582612383565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661164483610caf565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6116938261155d565b6116d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c990614696565b60405180910390fd5b806009600084815260200190815260200160002090805190602001906116f9929190613433565b505050565b60006117098261155d565b611748576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173f90614728565b60405180910390fd5b600061175383610caf565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806117c257508373ffffffffffffffffffffffffffffffffffffffff166117aa846107a8565b73ffffffffffffffffffffffffffffffffffffffff16145b806117d357506117d28185611238565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166117fc82610caf565b73ffffffffffffffffffffffffffffffffffffffff1614611852576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611849906147ba565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b99061484c565b60405180910390fd5b6118cd838383612465565b6118d86000826115d1565b6001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611928919061489b565b925050819055506001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461197f91906148cf565b92505081905550816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a3e838383612475565b505050565b611a4d8282610ffb565b611adc57611a728173ffffffffffffffffffffffffffffffffffffffff16601461247a565b611a808360001c602061247a565b604051602001611a919291906149f9565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad3919061367e565b60405180910390fd5b5050565b611aea82826113d3565b611b0f81600260008581526020019081526020016000206114b390919063ffffffff16565b505050565b611b1e82826126b6565b611b43816002600085815260200190815260200160002061279890919063ffffffff16565b505050565b611b50610c98565b611b8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8690614a7f565b60405180910390fd5b6000600e60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611bd36115c9565b604051611be09190613744565b60405180910390a1565b611bf3816127c8565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2190614aeb565b60405180910390fd5b611d338161155d565b15611d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6a90614b57565b60405180910390fd5b611d7f60008383612465565b6001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611dcf91906148cf565b92505081905550816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611e9060008383612475565b5050565b611e9c610c98565b15611edc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed390614bc3565b60405180910390fd5b6001600e60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f206115c9565b604051611f2d9190613744565b60405180910390a1565b6000611f46836000018361281b565b60001c905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611fc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb790614c2f565b60405180910390fd5b80600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516120b191906135ca565b60405180910390a3505050565b6120c98484846117dc565b6120d584848484612846565b612114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210b90614cc1565b60405180910390fd5b50505050565b60606121258261155d565b612164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215b90614d53565b60405180910390fd5b600060096000848152602001908152602001600020805461218490613d5b565b80601f01602080910402602001604051908101604052809291908181526020018280546121b090613d5b565b80156121fd5780601f106121d2576101008083540402835291602001916121fd565b820191906000526020600020905b8154815290600101906020018083116121e057829003601f168201915b50505050509050600061220e612281565b9050600081511415612224578192505050612267565b600082511115612259578082604051602001612241929190614d73565b60405160208183030381529060405292505050612267565b612262846129ce565b925050505b919050565b600061227a82600001612a75565b9050919050565b6060600f805461229090613d5b565b80601f01602080910402602001604051908101604052809291908181526020018280546122bc90613d5b565b80156123095780601f106122de57610100808354040283529160200191612309565b820191906000526020600020905b8154815290600101906020018083116122ec57829003601f168201915b5050505050905090565b600061231f8383612a86565b61237857826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061237d565b600090505b92915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061244e57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061245e575061245d82612aa9565b5b9050919050565b612470838383612b23565b505050565b505050565b60606000600283600261248d9190614d97565b61249791906148cf565b67ffffffffffffffff8111156124b0576124af6137d5565b5b6040519080825280601f01601f1916602001820160405280156124e25781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061251a576125196142af565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061257e5761257d6142af565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026125be9190614d97565b6125c891906148cf565b90505b6001811115612668577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061260a576126096142af565b5b1a60f81b828281518110612621576126206142af565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061266190614df1565b90506125cb565b50600084146126ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a390614e67565b60405180910390fd5b8091505092915050565b6126c08282610ffb565b156127945760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506127396115c9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006127c0836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612b7b565b905092915050565b6127d181612c8f565b60006009600083815260200190815260200160002080546127f190613d5b565b9050146128185760096000828152602001908152602001600020600061281791906134b9565b5b50565b6000826000018281548110612833576128326142af565b5b9060005260206000200154905092915050565b60006128678473ffffffffffffffffffffffffffffffffffffffff16612dac565b156129c1578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026128906115c9565b8786866040518563ffffffff1660e01b81526004016128b29493929190614edc565b6020604051808303816000875af19250505080156128ee57506040513d601f19601f820116820180604052508101906128eb9190614f3d565b60015b612971573d806000811461291e576040519150601f19603f3d011682016040523d82523d6000602084013e612923565b606091505b50600081511415612969576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296090614cc1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506129c6565b600190505b949350505050565b60606129d98261155d565b612a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0f90614fdc565b60405180910390fd5b6000612a22612281565b90506000815111612a425760405180602001604052806000815250612a6d565b80612a4c84612dcf565b604051602001612a5d929190614d73565b6040516020818303038152906040525b915050919050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612b1c5750612b1b82612f30565b5b9050919050565b612b2e838383612faa565b612b36610c98565b15612b76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6d9061506e565b60405180910390fd5b505050565b60008083600101600084815260200190815260200160002054905060008114612c83576000600182612bad919061489b565b9050600060018660000180549050612bc5919061489b565b9050818114612c34576000866000018281548110612be657612be56142af565b5b9060005260206000200154905080876000018481548110612c0a57612c096142af565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612c4857612c4761508e565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612c89565b60009150505b92915050565b6000612c9a82610caf565b9050612ca881600084612465565b612cb36000836115d1565b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d03919061489b565b925050819055506005600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612da881600084612475565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000821415612e17576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612f2b565b600082905060005b60008214612e49578080612e32906150bd565b915050600a82612e429190615135565b9150612e1f565b60008167ffffffffffffffff811115612e6557612e646137d5565b5b6040519080825280601f01601f191660200182016040528015612e975781602001600182028036833780820191505090505b5090505b60008514612f2457600182612eb0919061489b565b9150600a85612ebf9190615166565b6030612ecb91906148cf565b60f81b818381518110612ee157612ee06142af565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612f1d9190615135565b9450612e9b565b8093505050505b919050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612fa35750612fa2826130be565b5b9050919050565b612fb5838383613128565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612ff857612ff38161312d565b613037565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614613036576130358382613176565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561307a57613075816132e3565b6130b9565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146130b8576130b782826133b4565b5b5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050565b600c80549050600d600083815260200190815260200160002081905550600c81908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161318384610d61565b61318d919061489b565b90506000600b6000848152602001908152602001600020549050818114613272576000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000208190555081600b600083815260200190815260200160002081905550505b600b600084815260200190815260200160002060009055600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600c805490506132f7919061489b565b90506000600d60008481526020019081526020016000205490506000600c8381548110613327576133266142af565b5b9060005260206000200154905080600c8381548110613349576133486142af565b5b906000526020600020018190555081600d600083815260200190815260200160002081905550600d600085815260200190815260200160002060009055600c8054806133985761339761508e565b5b6001900381819060005260206000200160009055905550505050565b60006133bf83610d61565b905081600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000208190555080600b600084815260200190815260200160002081905550505050565b82805461343f90613d5b565b90600052602060002090601f01602090048101928261346157600085556134a8565b82601f1061347a57805160ff19168380011785556134a8565b828001600101855582156134a8579182015b828111156134a757825182559160200191906001019061348c565b5b5090506134b591906134f9565b5090565b5080546134c590613d5b565b6000825580601f106134d757506134f6565b601f0160209004906000526020600020908101906134f591906134f9565b5b50565b5b808211156135125760008160009055506001016134fa565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61355f8161352a565b811461356a57600080fd5b50565b60008135905061357c81613556565b92915050565b60006020828403121561359857613597613520565b5b60006135a68482850161356d565b91505092915050565b60008115159050919050565b6135c4816135af565b82525050565b60006020820190506135df60008301846135bb565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561361f578082015181840152602081019050613604565b8381111561362e576000848401525b50505050565b6000601f19601f8301169050919050565b6000613650826135e5565b61365a81856135f0565b935061366a818560208601613601565b61367381613634565b840191505092915050565b600060208201905081810360008301526136988184613645565b905092915050565b6000819050919050565b6136b3816136a0565b81146136be57600080fd5b50565b6000813590506136d0816136aa565b92915050565b6000602082840312156136ec576136eb613520565b5b60006136fa848285016136c1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061372e82613703565b9050919050565b61373e81613723565b82525050565b60006020820190506137596000830184613735565b92915050565b61376881613723565b811461377357600080fd5b50565b6000813590506137858161375f565b92915050565b600080604083850312156137a2576137a1613520565b5b60006137b085828601613776565b92505060206137c1858286016136c1565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61380d82613634565b810181811067ffffffffffffffff8211171561382c5761382b6137d5565b5b80604052505050565b600061383f613516565b905061384b8282613804565b919050565b600067ffffffffffffffff82111561386b5761386a6137d5565b5b61387482613634565b9050602081019050919050565b82818337600083830152505050565b60006138a361389e84613850565b613835565b9050828152602081018484840111156138bf576138be6137d0565b5b6138ca848285613881565b509392505050565b600082601f8301126138e7576138e66137cb565b5b81356138f7848260208601613890565b91505092915050565b6000806040838503121561391757613916613520565b5b6000613925858286016136c1565b925050602083013567ffffffffffffffff81111561394657613945613525565b5b613952858286016138d2565b9150509250929050565b613965816136a0565b82525050565b6000602082019050613980600083018461395c565b92915050565b60008060006060848603121561399f5761399e613520565b5b60006139ad86828701613776565b93505060206139be86828701613776565b92505060406139cf868287016136c1565b9150509250925092565b6000819050919050565b6139ec816139d9565b81146139f757600080fd5b50565b600081359050613a09816139e3565b92915050565b600060208284031215613a2557613a24613520565b5b6000613a33848285016139fa565b91505092915050565b613a45816139d9565b82525050565b6000602082019050613a606000830184613a3c565b92915050565b60008060408385031215613a7d57613a7c613520565b5b6000613a8b858286016139fa565b9250506020613a9c85828601613776565b9150509250929050565b600060208284031215613abc57613abb613520565b5b6000613aca84828501613776565b91505092915050565b60008060408385031215613aea57613ae9613520565b5b6000613af8858286016139fa565b9250506020613b09858286016136c1565b9150509250929050565b600060208284031215613b2957613b28613520565b5b600082013567ffffffffffffffff811115613b4757613b46613525565b5b613b53848285016138d2565b91505092915050565b613b65816135af565b8114613b7057600080fd5b50565b600081359050613b8281613b5c565b92915050565b60008060408385031215613b9f57613b9e613520565b5b6000613bad85828601613776565b9250506020613bbe85828601613b73565b9150509250929050565b600067ffffffffffffffff821115613be357613be26137d5565b5b613bec82613634565b9050602081019050919050565b6000613c0c613c0784613bc8565b613835565b905082815260208101848484011115613c2857613c276137d0565b5b613c33848285613881565b509392505050565b600082601f830112613c5057613c4f6137cb565b5b8135613c60848260208601613bf9565b91505092915050565b60008060008060808587031215613c8357613c82613520565b5b6000613c9187828801613776565b9450506020613ca287828801613776565b9350506040613cb3878288016136c1565b925050606085013567ffffffffffffffff811115613cd457613cd3613525565b5b613ce087828801613c3b565b91505092959194509250565b60008060408385031215613d0357613d02613520565b5b6000613d1185828601613776565b9250506020613d2285828601613776565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613d7357607f821691505b60208210811415613d8757613d86613d2c565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613de9602c836135f0565b9150613df482613d8d565b604082019050919050565b60006020820190508181036000830152613e1881613ddc565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613e7b6021836135f0565b9150613e8682613e1f565b604082019050919050565b60006020820190508181036000830152613eaa81613e6e565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000613f0d6038836135f0565b9150613f1882613eb1565b604082019050919050565b60006020820190508181036000830152613f3c81613f00565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000613f9f6031836135f0565b9150613faa82613f43565b604082019050919050565b60006020820190508181036000830152613fce81613f92565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000614031602b836135f0565b915061403c82613fd5565b604082019050919050565b6000602082019050818103600083015261406081614024565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006140c3602f836135f0565b91506140ce82614067565b604082019050919050565b600060208201905081810360008301526140f2816140b6565b9050919050565b7f4552433732315072657365744d696e7465725061757365724175746f49643a2060008201527f6d75737420686176652070617573657220726f6c6520746f20756e7061757365602082015250565b60006141556040836135f0565b9150614160826140f9565b604082019050919050565b6000602082019050818103600083015261418481614148565b9050919050565b7f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000602082015250565b60006141e76030836135f0565b91506141f28261418b565b604082019050919050565b60006020820190508181036000830152614216816141da565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614279602c836135f0565b91506142848261421d565b604082019050919050565b600060208201905081810360008301526142a88161426c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b600061433a6029836135f0565b9150614345826142de565b604082019050919050565b600060208201905081810360008301526143698161432d565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b60006143cc602a836135f0565b91506143d782614370565b604082019050919050565b600060208201905081810360008301526143fb816143bf565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006144386020836135f0565b915061444382614402565b602082019050919050565b600060208201905081810360008301526144678161442b565b9050919050565b7f4552433732315072657365744d696e7465725061757365724175746f49643a2060008201527f6d7573742068617665206d696e74657220726f6c6520746f206d696e74000000602082015250565b60006144ca603d836135f0565b91506144d58261446e565b604082019050919050565b600060208201905081810360008301526144f9816144bd565b9050919050565b7f4552433732315072657365744d696e7465725061757365724175746f49643a2060008201527f6d75737420686176652070617573657220726f6c6520746f2070617573650000602082015250565b600061455c603e836135f0565b915061456782614500565b604082019050919050565b6000602082019050818103600083015261458b8161454f565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006145ee6026836135f0565b91506145f982614592565b604082019050919050565b6000602082019050818103600083015261461d816145e1565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000614680602e836135f0565b915061468b82614624565b604082019050919050565b600060208201905081810360008301526146af81614673565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614712602c836135f0565b915061471d826146b6565b604082019050919050565b6000602082019050818103600083015261474181614705565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006147a46025836135f0565b91506147af82614748565b604082019050919050565b600060208201905081810360008301526147d381614797565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006148366024836135f0565b9150614841826147da565b604082019050919050565b6000602082019050818103600083015261486581614829565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006148a6826136a0565b91506148b1836136a0565b9250828210156148c4576148c361486c565b5b828203905092915050565b60006148da826136a0565b91506148e5836136a0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561491a5761491961486c565b5b828201905092915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000614966601783614925565b915061497182614930565b601782019050919050565b6000614987826135e5565b6149918185614925565b93506149a1818560208601613601565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006149e3601183614925565b91506149ee826149ad565b601182019050919050565b6000614a0482614959565b9150614a10828561497c565b9150614a1b826149d6565b9150614a27828461497c565b91508190509392505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000614a696014836135f0565b9150614a7482614a33565b602082019050919050565b60006020820190508181036000830152614a9881614a5c565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614ad56020836135f0565b9150614ae082614a9f565b602082019050919050565b60006020820190508181036000830152614b0481614ac8565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614b41601c836135f0565b9150614b4c82614b0b565b602082019050919050565b60006020820190508181036000830152614b7081614b34565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614bad6010836135f0565b9150614bb882614b77565b602082019050919050565b60006020820190508181036000830152614bdc81614ba0565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614c196019836135f0565b9150614c2482614be3565b602082019050919050565b60006020820190508181036000830152614c4881614c0c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614cab6032836135f0565b9150614cb682614c4f565b604082019050919050565b60006020820190508181036000830152614cda81614c9e565b9050919050565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b6000614d3d6031836135f0565b9150614d4882614ce1565b604082019050919050565b60006020820190508181036000830152614d6c81614d30565b9050919050565b6000614d7f828561497c565b9150614d8b828461497c565b91508190509392505050565b6000614da2826136a0565b9150614dad836136a0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614de657614de561486c565b5b828202905092915050565b6000614dfc826136a0565b91506000821415614e1057614e0f61486c565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000614e516020836135f0565b9150614e5c82614e1b565b602082019050919050565b60006020820190508181036000830152614e8081614e44565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614eae82614e87565b614eb88185614e92565b9350614ec8818560208601613601565b614ed181613634565b840191505092915050565b6000608082019050614ef16000830187613735565b614efe6020830186613735565b614f0b604083018561395c565b8181036060830152614f1d8184614ea3565b905095945050505050565b600081519050614f3781613556565b92915050565b600060208284031215614f5357614f52613520565b5b6000614f6184828501614f28565b91505092915050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000614fc6602f836135f0565b9150614fd182614f6a565b604082019050919050565b60006020820190508181036000830152614ff581614fb9565b9050919050565b7f4552433732315061757361626c653a20746f6b656e207472616e73666572207760008201527f68696c6520706175736564000000000000000000000000000000000000000000602082015250565b6000615058602b836135f0565b915061506382614ffc565b604082019050919050565b600060208201905081810360008301526150878161504b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006150c8826136a0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156150fb576150fa61486c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615140826136a0565b915061514b836136a0565b92508261515b5761515a615106565b5b828204905092915050565b6000615171826136a0565b915061517c836136a0565b92508261518c5761518b615106565b5b82820690509291505056fea2646970667358221220320abec40a87ff62318328da446c0d1a061b596dee198fc203654b81dd232dea64736f6c634300080c0033",
}

// NftcontractABI is the input ABI used to generate the binding from.
// Deprecated: Use NftcontractMetaData.ABI instead.
var NftcontractABI = NftcontractMetaData.ABI

// NftcontractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NftcontractMetaData.Bin instead.
var NftcontractBin = NftcontractMetaData.Bin

// DeployNftcontract deploys a new Ethereum contract, binding an instance of Nftcontract to it.
func DeployNftcontract(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, tokenURIPrefix string) (common.Address, *types.Transaction, *Nftcontract, error) {
	parsed, err := NftcontractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NftcontractBin), backend, name, symbol, tokenURIPrefix)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Nftcontract{NftcontractCaller: NftcontractCaller{contract: contract}, NftcontractTransactor: NftcontractTransactor{contract: contract}, NftcontractFilterer: NftcontractFilterer{contract: contract}}, nil
}

// Nftcontract is an auto generated Go binding around an Ethereum contract.
type Nftcontract struct {
	NftcontractCaller     // Read-only binding to the contract
	NftcontractTransactor // Write-only binding to the contract
	NftcontractFilterer   // Log filterer for contract events
}

// NftcontractCaller is an auto generated read-only Go binding around an Ethereum contract.
type NftcontractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NftcontractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NftcontractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NftcontractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NftcontractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NftcontractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NftcontractSession struct {
	Contract     *Nftcontract      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NftcontractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NftcontractCallerSession struct {
	Contract *NftcontractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// NftcontractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NftcontractTransactorSession struct {
	Contract     *NftcontractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// NftcontractRaw is an auto generated low-level Go binding around an Ethereum contract.
type NftcontractRaw struct {
	Contract *Nftcontract // Generic contract binding to access the raw methods on
}

// NftcontractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NftcontractCallerRaw struct {
	Contract *NftcontractCaller // Generic read-only contract binding to access the raw methods on
}

// NftcontractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NftcontractTransactorRaw struct {
	Contract *NftcontractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNftcontract creates a new instance of Nftcontract, bound to a specific deployed contract.
func NewNftcontract(address common.Address, backend bind.ContractBackend) (*Nftcontract, error) {
	contract, err := bindNftcontract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Nftcontract{NftcontractCaller: NftcontractCaller{contract: contract}, NftcontractTransactor: NftcontractTransactor{contract: contract}, NftcontractFilterer: NftcontractFilterer{contract: contract}}, nil
}

// NewNftcontractCaller creates a new read-only instance of Nftcontract, bound to a specific deployed contract.
func NewNftcontractCaller(address common.Address, caller bind.ContractCaller) (*NftcontractCaller, error) {
	contract, err := bindNftcontract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NftcontractCaller{contract: contract}, nil
}

// NewNftcontractTransactor creates a new write-only instance of Nftcontract, bound to a specific deployed contract.
func NewNftcontractTransactor(address common.Address, transactor bind.ContractTransactor) (*NftcontractTransactor, error) {
	contract, err := bindNftcontract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NftcontractTransactor{contract: contract}, nil
}

// NewNftcontractFilterer creates a new log filterer instance of Nftcontract, bound to a specific deployed contract.
func NewNftcontractFilterer(address common.Address, filterer bind.ContractFilterer) (*NftcontractFilterer, error) {
	contract, err := bindNftcontract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NftcontractFilterer{contract: contract}, nil
}

// bindNftcontract binds a generic wrapper to an already deployed contract.
func bindNftcontract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NftcontractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Nftcontract *NftcontractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Nftcontract.Contract.NftcontractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Nftcontract *NftcontractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nftcontract.Contract.NftcontractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Nftcontract *NftcontractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Nftcontract.Contract.NftcontractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Nftcontract *NftcontractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Nftcontract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Nftcontract *NftcontractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nftcontract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Nftcontract *NftcontractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Nftcontract.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Nftcontract *NftcontractCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Nftcontract *NftcontractSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Nftcontract.Contract.DEFAULTADMINROLE(&_Nftcontract.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Nftcontract *NftcontractCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Nftcontract.Contract.DEFAULTADMINROLE(&_Nftcontract.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_Nftcontract *NftcontractCaller) MINTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "MINTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_Nftcontract *NftcontractSession) MINTERROLE() ([32]byte, error) {
	return _Nftcontract.Contract.MINTERROLE(&_Nftcontract.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_Nftcontract *NftcontractCallerSession) MINTERROLE() ([32]byte, error) {
	return _Nftcontract.Contract.MINTERROLE(&_Nftcontract.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_Nftcontract *NftcontractCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_Nftcontract *NftcontractSession) PAUSERROLE() ([32]byte, error) {
	return _Nftcontract.Contract.PAUSERROLE(&_Nftcontract.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_Nftcontract *NftcontractCallerSession) PAUSERROLE() ([32]byte, error) {
	return _Nftcontract.Contract.PAUSERROLE(&_Nftcontract.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Nftcontract *NftcontractCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Nftcontract *NftcontractSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Nftcontract.Contract.BalanceOf(&_Nftcontract.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Nftcontract *NftcontractCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Nftcontract.Contract.BalanceOf(&_Nftcontract.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Nftcontract *NftcontractCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Nftcontract *NftcontractSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Nftcontract.Contract.GetApproved(&_Nftcontract.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Nftcontract *NftcontractCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Nftcontract.Contract.GetApproved(&_Nftcontract.CallOpts, tokenId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Nftcontract *NftcontractCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Nftcontract *NftcontractSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Nftcontract.Contract.GetRoleAdmin(&_Nftcontract.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Nftcontract *NftcontractCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Nftcontract.Contract.GetRoleAdmin(&_Nftcontract.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Nftcontract *NftcontractCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Nftcontract *NftcontractSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Nftcontract.Contract.GetRoleMember(&_Nftcontract.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Nftcontract *NftcontractCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Nftcontract.Contract.GetRoleMember(&_Nftcontract.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Nftcontract *NftcontractCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Nftcontract *NftcontractSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Nftcontract.Contract.GetRoleMemberCount(&_Nftcontract.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Nftcontract *NftcontractCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Nftcontract.Contract.GetRoleMemberCount(&_Nftcontract.CallOpts, role)
}

// GetTokenURIPrefix is a free data retrieval call binding the contract method 0xf7b20a7d.
//
// Solidity: function getTokenURIPrefix() view returns(string)
func (_Nftcontract *NftcontractCaller) GetTokenURIPrefix(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "getTokenURIPrefix")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetTokenURIPrefix is a free data retrieval call binding the contract method 0xf7b20a7d.
//
// Solidity: function getTokenURIPrefix() view returns(string)
func (_Nftcontract *NftcontractSession) GetTokenURIPrefix() (string, error) {
	return _Nftcontract.Contract.GetTokenURIPrefix(&_Nftcontract.CallOpts)
}

// GetTokenURIPrefix is a free data retrieval call binding the contract method 0xf7b20a7d.
//
// Solidity: function getTokenURIPrefix() view returns(string)
func (_Nftcontract *NftcontractCallerSession) GetTokenURIPrefix() (string, error) {
	return _Nftcontract.Contract.GetTokenURIPrefix(&_Nftcontract.CallOpts)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Nftcontract *NftcontractCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Nftcontract *NftcontractSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Nftcontract.Contract.HasRole(&_Nftcontract.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Nftcontract *NftcontractCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Nftcontract.Contract.HasRole(&_Nftcontract.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Nftcontract *NftcontractCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Nftcontract *NftcontractSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Nftcontract.Contract.IsApprovedForAll(&_Nftcontract.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Nftcontract *NftcontractCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Nftcontract.Contract.IsApprovedForAll(&_Nftcontract.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Nftcontract *NftcontractCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Nftcontract *NftcontractSession) Name() (string, error) {
	return _Nftcontract.Contract.Name(&_Nftcontract.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Nftcontract *NftcontractCallerSession) Name() (string, error) {
	return _Nftcontract.Contract.Name(&_Nftcontract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Nftcontract *NftcontractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Nftcontract *NftcontractSession) Owner() (common.Address, error) {
	return _Nftcontract.Contract.Owner(&_Nftcontract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Nftcontract *NftcontractCallerSession) Owner() (common.Address, error) {
	return _Nftcontract.Contract.Owner(&_Nftcontract.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Nftcontract *NftcontractCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Nftcontract *NftcontractSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Nftcontract.Contract.OwnerOf(&_Nftcontract.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Nftcontract *NftcontractCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Nftcontract.Contract.OwnerOf(&_Nftcontract.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Nftcontract *NftcontractCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Nftcontract *NftcontractSession) Paused() (bool, error) {
	return _Nftcontract.Contract.Paused(&_Nftcontract.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Nftcontract *NftcontractCallerSession) Paused() (bool, error) {
	return _Nftcontract.Contract.Paused(&_Nftcontract.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Nftcontract *NftcontractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Nftcontract *NftcontractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Nftcontract.Contract.SupportsInterface(&_Nftcontract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Nftcontract *NftcontractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Nftcontract.Contract.SupportsInterface(&_Nftcontract.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Nftcontract *NftcontractCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Nftcontract *NftcontractSession) Symbol() (string, error) {
	return _Nftcontract.Contract.Symbol(&_Nftcontract.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Nftcontract *NftcontractCallerSession) Symbol() (string, error) {
	return _Nftcontract.Contract.Symbol(&_Nftcontract.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Nftcontract *NftcontractCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Nftcontract *NftcontractSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Nftcontract.Contract.TokenByIndex(&_Nftcontract.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Nftcontract *NftcontractCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Nftcontract.Contract.TokenByIndex(&_Nftcontract.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Nftcontract *NftcontractCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Nftcontract *NftcontractSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Nftcontract.Contract.TokenOfOwnerByIndex(&_Nftcontract.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Nftcontract *NftcontractCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Nftcontract.Contract.TokenOfOwnerByIndex(&_Nftcontract.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Nftcontract *NftcontractCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Nftcontract *NftcontractSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Nftcontract.Contract.TokenURI(&_Nftcontract.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Nftcontract *NftcontractCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Nftcontract.Contract.TokenURI(&_Nftcontract.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Nftcontract *NftcontractCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Nftcontract.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Nftcontract *NftcontractSession) TotalSupply() (*big.Int, error) {
	return _Nftcontract.Contract.TotalSupply(&_Nftcontract.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Nftcontract *NftcontractCallerSession) TotalSupply() (*big.Int, error) {
	return _Nftcontract.Contract.TotalSupply(&_Nftcontract.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Nftcontract *NftcontractTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Nftcontract *NftcontractSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftcontract.Contract.Approve(&_Nftcontract.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Nftcontract *NftcontractTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftcontract.Contract.Approve(&_Nftcontract.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_Nftcontract *NftcontractTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_Nftcontract *NftcontractSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _Nftcontract.Contract.Burn(&_Nftcontract.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_Nftcontract *NftcontractTransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _Nftcontract.Contract.Burn(&_Nftcontract.TransactOpts, tokenId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Nftcontract *NftcontractTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Nftcontract *NftcontractSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Nftcontract.Contract.GrantRole(&_Nftcontract.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Nftcontract *NftcontractTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Nftcontract.Contract.GrantRole(&_Nftcontract.TransactOpts, role, account)
}

// Mint is a paid mutator transaction binding the contract method 0x77097fc8.
//
// Solidity: function mint(uint256 _tokenId, string _tokenURI) returns()
func (_Nftcontract *NftcontractTransactor) Mint(opts *bind.TransactOpts, _tokenId *big.Int, _tokenURI string) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "mint", _tokenId, _tokenURI)
}

// Mint is a paid mutator transaction binding the contract method 0x77097fc8.
//
// Solidity: function mint(uint256 _tokenId, string _tokenURI) returns()
func (_Nftcontract *NftcontractSession) Mint(_tokenId *big.Int, _tokenURI string) (*types.Transaction, error) {
	return _Nftcontract.Contract.Mint(&_Nftcontract.TransactOpts, _tokenId, _tokenURI)
}

// Mint is a paid mutator transaction binding the contract method 0x77097fc8.
//
// Solidity: function mint(uint256 _tokenId, string _tokenURI) returns()
func (_Nftcontract *NftcontractTransactorSession) Mint(_tokenId *big.Int, _tokenURI string) (*types.Transaction, error) {
	return _Nftcontract.Contract.Mint(&_Nftcontract.TransactOpts, _tokenId, _tokenURI)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Nftcontract *NftcontractTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Nftcontract *NftcontractSession) Pause() (*types.Transaction, error) {
	return _Nftcontract.Contract.Pause(&_Nftcontract.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Nftcontract *NftcontractTransactorSession) Pause() (*types.Transaction, error) {
	return _Nftcontract.Contract.Pause(&_Nftcontract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Nftcontract *NftcontractTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Nftcontract *NftcontractSession) RenounceOwnership() (*types.Transaction, error) {
	return _Nftcontract.Contract.RenounceOwnership(&_Nftcontract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Nftcontract *NftcontractTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Nftcontract.Contract.RenounceOwnership(&_Nftcontract.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Nftcontract *NftcontractTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Nftcontract *NftcontractSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Nftcontract.Contract.RenounceRole(&_Nftcontract.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Nftcontract *NftcontractTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Nftcontract.Contract.RenounceRole(&_Nftcontract.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Nftcontract *NftcontractTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Nftcontract *NftcontractSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Nftcontract.Contract.RevokeRole(&_Nftcontract.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Nftcontract *NftcontractTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Nftcontract.Contract.RevokeRole(&_Nftcontract.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Nftcontract *NftcontractTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Nftcontract *NftcontractSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftcontract.Contract.SafeTransferFrom(&_Nftcontract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Nftcontract *NftcontractTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftcontract.Contract.SafeTransferFrom(&_Nftcontract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Nftcontract *NftcontractTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Nftcontract *NftcontractSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Nftcontract.Contract.SafeTransferFrom0(&_Nftcontract.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Nftcontract *NftcontractTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Nftcontract.Contract.SafeTransferFrom0(&_Nftcontract.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Nftcontract *NftcontractTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Nftcontract *NftcontractSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Nftcontract.Contract.SetApprovalForAll(&_Nftcontract.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Nftcontract *NftcontractTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Nftcontract.Contract.SetApprovalForAll(&_Nftcontract.TransactOpts, operator, approved)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(uint256 tokenId, string _tokenURI) returns()
func (_Nftcontract *NftcontractTransactor) SetTokenURI(opts *bind.TransactOpts, tokenId *big.Int, _tokenURI string) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "setTokenURI", tokenId, _tokenURI)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(uint256 tokenId, string _tokenURI) returns()
func (_Nftcontract *NftcontractSession) SetTokenURI(tokenId *big.Int, _tokenURI string) (*types.Transaction, error) {
	return _Nftcontract.Contract.SetTokenURI(&_Nftcontract.TransactOpts, tokenId, _tokenURI)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(uint256 tokenId, string _tokenURI) returns()
func (_Nftcontract *NftcontractTransactorSession) SetTokenURI(tokenId *big.Int, _tokenURI string) (*types.Transaction, error) {
	return _Nftcontract.Contract.SetTokenURI(&_Nftcontract.TransactOpts, tokenId, _tokenURI)
}

// SetTokenURIPrefix is a paid mutator transaction binding the contract method 0x99e0dd7c.
//
// Solidity: function setTokenURIPrefix(string _tokenURIPrefix) returns()
func (_Nftcontract *NftcontractTransactor) SetTokenURIPrefix(opts *bind.TransactOpts, _tokenURIPrefix string) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "setTokenURIPrefix", _tokenURIPrefix)
}

// SetTokenURIPrefix is a paid mutator transaction binding the contract method 0x99e0dd7c.
//
// Solidity: function setTokenURIPrefix(string _tokenURIPrefix) returns()
func (_Nftcontract *NftcontractSession) SetTokenURIPrefix(_tokenURIPrefix string) (*types.Transaction, error) {
	return _Nftcontract.Contract.SetTokenURIPrefix(&_Nftcontract.TransactOpts, _tokenURIPrefix)
}

// SetTokenURIPrefix is a paid mutator transaction binding the contract method 0x99e0dd7c.
//
// Solidity: function setTokenURIPrefix(string _tokenURIPrefix) returns()
func (_Nftcontract *NftcontractTransactorSession) SetTokenURIPrefix(_tokenURIPrefix string) (*types.Transaction, error) {
	return _Nftcontract.Contract.SetTokenURIPrefix(&_Nftcontract.TransactOpts, _tokenURIPrefix)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Nftcontract *NftcontractTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Nftcontract *NftcontractSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftcontract.Contract.TransferFrom(&_Nftcontract.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Nftcontract *NftcontractTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Nftcontract.Contract.TransferFrom(&_Nftcontract.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Nftcontract *NftcontractTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Nftcontract *NftcontractSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Nftcontract.Contract.TransferOwnership(&_Nftcontract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Nftcontract *NftcontractTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Nftcontract.Contract.TransferOwnership(&_Nftcontract.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Nftcontract *NftcontractTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nftcontract.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Nftcontract *NftcontractSession) Unpause() (*types.Transaction, error) {
	return _Nftcontract.Contract.Unpause(&_Nftcontract.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Nftcontract *NftcontractTransactorSession) Unpause() (*types.Transaction, error) {
	return _Nftcontract.Contract.Unpause(&_Nftcontract.TransactOpts)
}

// NftcontractApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Nftcontract contract.
type NftcontractApprovalIterator struct {
	Event *NftcontractApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftcontractApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftcontractApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftcontractApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftcontractApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftcontractApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftcontractApproval represents a Approval event raised by the Nftcontract contract.
type NftcontractApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Nftcontract *NftcontractFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*NftcontractApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Nftcontract.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &NftcontractApprovalIterator{contract: _Nftcontract.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Nftcontract *NftcontractFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *NftcontractApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Nftcontract.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftcontractApproval)
				if err := _Nftcontract.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Nftcontract *NftcontractFilterer) ParseApproval(log types.Log) (*NftcontractApproval, error) {
	event := new(NftcontractApproval)
	if err := _Nftcontract.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftcontractApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Nftcontract contract.
type NftcontractApprovalForAllIterator struct {
	Event *NftcontractApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftcontractApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftcontractApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftcontractApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftcontractApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftcontractApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftcontractApprovalForAll represents a ApprovalForAll event raised by the Nftcontract contract.
type NftcontractApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Nftcontract *NftcontractFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*NftcontractApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Nftcontract.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &NftcontractApprovalForAllIterator{contract: _Nftcontract.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Nftcontract *NftcontractFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *NftcontractApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Nftcontract.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftcontractApprovalForAll)
				if err := _Nftcontract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Nftcontract *NftcontractFilterer) ParseApprovalForAll(log types.Log) (*NftcontractApprovalForAll, error) {
	event := new(NftcontractApprovalForAll)
	if err := _Nftcontract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftcontractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Nftcontract contract.
type NftcontractOwnershipTransferredIterator struct {
	Event *NftcontractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftcontractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftcontractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftcontractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftcontractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftcontractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftcontractOwnershipTransferred represents a OwnershipTransferred event raised by the Nftcontract contract.
type NftcontractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Nftcontract *NftcontractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*NftcontractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Nftcontract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &NftcontractOwnershipTransferredIterator{contract: _Nftcontract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Nftcontract *NftcontractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *NftcontractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Nftcontract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftcontractOwnershipTransferred)
				if err := _Nftcontract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Nftcontract *NftcontractFilterer) ParseOwnershipTransferred(log types.Log) (*NftcontractOwnershipTransferred, error) {
	event := new(NftcontractOwnershipTransferred)
	if err := _Nftcontract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftcontractPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Nftcontract contract.
type NftcontractPausedIterator struct {
	Event *NftcontractPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftcontractPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftcontractPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftcontractPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftcontractPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftcontractPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftcontractPaused represents a Paused event raised by the Nftcontract contract.
type NftcontractPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Nftcontract *NftcontractFilterer) FilterPaused(opts *bind.FilterOpts) (*NftcontractPausedIterator, error) {

	logs, sub, err := _Nftcontract.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &NftcontractPausedIterator{contract: _Nftcontract.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Nftcontract *NftcontractFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *NftcontractPaused) (event.Subscription, error) {

	logs, sub, err := _Nftcontract.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftcontractPaused)
				if err := _Nftcontract.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Nftcontract *NftcontractFilterer) ParsePaused(log types.Log) (*NftcontractPaused, error) {
	event := new(NftcontractPaused)
	if err := _Nftcontract.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftcontractRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Nftcontract contract.
type NftcontractRoleAdminChangedIterator struct {
	Event *NftcontractRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftcontractRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftcontractRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftcontractRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftcontractRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftcontractRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftcontractRoleAdminChanged represents a RoleAdminChanged event raised by the Nftcontract contract.
type NftcontractRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Nftcontract *NftcontractFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*NftcontractRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Nftcontract.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &NftcontractRoleAdminChangedIterator{contract: _Nftcontract.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Nftcontract *NftcontractFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *NftcontractRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Nftcontract.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftcontractRoleAdminChanged)
				if err := _Nftcontract.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Nftcontract *NftcontractFilterer) ParseRoleAdminChanged(log types.Log) (*NftcontractRoleAdminChanged, error) {
	event := new(NftcontractRoleAdminChanged)
	if err := _Nftcontract.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftcontractRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Nftcontract contract.
type NftcontractRoleGrantedIterator struct {
	Event *NftcontractRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftcontractRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftcontractRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftcontractRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftcontractRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftcontractRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftcontractRoleGranted represents a RoleGranted event raised by the Nftcontract contract.
type NftcontractRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Nftcontract *NftcontractFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*NftcontractRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Nftcontract.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &NftcontractRoleGrantedIterator{contract: _Nftcontract.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Nftcontract *NftcontractFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *NftcontractRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Nftcontract.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftcontractRoleGranted)
				if err := _Nftcontract.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Nftcontract *NftcontractFilterer) ParseRoleGranted(log types.Log) (*NftcontractRoleGranted, error) {
	event := new(NftcontractRoleGranted)
	if err := _Nftcontract.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftcontractRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Nftcontract contract.
type NftcontractRoleRevokedIterator struct {
	Event *NftcontractRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftcontractRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftcontractRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftcontractRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftcontractRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftcontractRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftcontractRoleRevoked represents a RoleRevoked event raised by the Nftcontract contract.
type NftcontractRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Nftcontract *NftcontractFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*NftcontractRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Nftcontract.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &NftcontractRoleRevokedIterator{contract: _Nftcontract.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Nftcontract *NftcontractFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *NftcontractRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Nftcontract.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftcontractRoleRevoked)
				if err := _Nftcontract.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Nftcontract *NftcontractFilterer) ParseRoleRevoked(log types.Log) (*NftcontractRoleRevoked, error) {
	event := new(NftcontractRoleRevoked)
	if err := _Nftcontract.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftcontractTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Nftcontract contract.
type NftcontractTransferIterator struct {
	Event *NftcontractTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftcontractTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftcontractTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftcontractTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftcontractTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftcontractTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftcontractTransfer represents a Transfer event raised by the Nftcontract contract.
type NftcontractTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Nftcontract *NftcontractFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*NftcontractTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Nftcontract.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &NftcontractTransferIterator{contract: _Nftcontract.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Nftcontract *NftcontractFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *NftcontractTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Nftcontract.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftcontractTransfer)
				if err := _Nftcontract.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Nftcontract *NftcontractFilterer) ParseTransfer(log types.Log) (*NftcontractTransfer, error) {
	event := new(NftcontractTransfer)
	if err := _Nftcontract.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NftcontractUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Nftcontract contract.
type NftcontractUnpausedIterator struct {
	Event *NftcontractUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NftcontractUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NftcontractUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NftcontractUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NftcontractUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NftcontractUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NftcontractUnpaused represents a Unpaused event raised by the Nftcontract contract.
type NftcontractUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Nftcontract *NftcontractFilterer) FilterUnpaused(opts *bind.FilterOpts) (*NftcontractUnpausedIterator, error) {

	logs, sub, err := _Nftcontract.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &NftcontractUnpausedIterator{contract: _Nftcontract.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Nftcontract *NftcontractFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *NftcontractUnpaused) (event.Subscription, error) {

	logs, sub, err := _Nftcontract.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NftcontractUnpaused)
				if err := _Nftcontract.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Nftcontract *NftcontractFilterer) ParseUnpaused(log types.Log) (*NftcontractUnpaused, error) {
	event := new(NftcontractUnpaused)
	if err := _Nftcontract.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
